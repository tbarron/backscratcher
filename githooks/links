#!/usr/bin/env python
import glob
import optparse
import os
import pdb
import sys


# -----------------------------------------------------------------------------
def git_root():
    r = os.path.dirname(os.path.dirname(os.path.abspath(sys.argv[0])))
    return r

try:
    from bscr import util as U
except ImportError:
    r = git_root()
    if not os.path.isdir(os.path.join(r, ".git")):
        raise StandardError("%s does not seem to be a git repo" % r)
    sys.path.insert(0, r)
    from bscr import util as U


# -----------------------------------------------------------------------------
def ln_make(args):
    r = git_root()
    ld = os.path.join(r, ".git/hooks")
    fd = os.path.join(r, "githooks")

    # key -> value, link -> file
    ll = linklist()
    for ln in ll:
        fpath = os.path.join(fd, ll[ln])
        lpath = os.path.join(r, '.git', 'hooks', ln)
        if not os.path.exists(lpath):
            os.symlink(fpath, lpath)
        else:
            print("%s already exists" % lpath)


# -----------------------------------------------------------------------------
def ln_rm(args):
    r = git_root()
    ld = os.path.join(r, ".git/hooks")
    ll = linklist()
    for ln in ll:
        os.unlink(os.path.join(ld, ln))


# -----------------------------------------------------------------------------
def ln_show(args):
    r = git_root()
    ld = os.path.join(r, ".git/hooks")
    ll = linklist()
    for ln in ll:
        lp = os.path.join(ld, ln)
        if os.path.islink(lp):
            fp = os.readlink(lp)
            print("%s\n   -> %s" % (lp, fp))
        elif os.path.exists(lp):
            print("%s is not a link" % lp)
        else:
            print("%s does not exist" % lp)


# -----------------------------------------------------------------------------
def linklist():
    links = {'pre-commit': 'pre-commit'}
    return links


# -----------------------------------------------------------------------------
if __name__ == '__main__':
    U.dispatch(__name__, "ln", sys.argv)
