This file describes how I manage development of backscratcher.

Rules

 * Keep exactly one working copy locally. If you clone a temporary
   repo for reference, remove it when you're done.

 * Keep the working copy open on a feature branch, not master. When
   you're ready to make a release, do it all in one sitting so things
   are not left half baked.

Directories and Files
(Starred entries are not in git)

    ~/Dropbox/prj/backscratcher/DODO.org*
        Where I keep track of what I'm doing and what I want to do next.

    LICENSE
        What the name says.

    MANIFEST.in
        Input to setup.py about what to include in the distribution package

    README.md
        Markdown source for README. Copied to README as part of installation.

    TAGS*
        Emacs tags file for navigating the source code.

    attic*
        A place to stick stuff I don't want in the package but I'm not
        yet ready to throw away.

    bscr
        Where the .py files of package bscr reside.

    bscr/test
        Where the package tests reside.

    cmsg*
        A place to compose commit messages.

    ~/Dropbox/prj/backscratcher/dev.README
        This file.

    dist
        Where setup.py puts generated distribution files.

    githooks
        git hooks provided with the repo. Run 'githooks/links' to
        manage the hooks:
            githooks/links make   - install the hooks
            githooks/links rm     - remove the hooks
            githooks/links show   - check the hooks

    nose.cfg
        Config file for nosetests.

    requirements.txt
        setup.py uses this to know what prereqs must be installed so
        backscratcher will work. 

    setup.py
        The standard python package management script.



Tests go in directory bscr/tests in files called test_COMPONENT.py.

Running tests

  py.test [-v] [-x] [bscr/test] [-k regexp] [--cov bscr]


Test options:
  -v    verbose output (list tests as they are run)
  -x    fast fail: give up on first failure
  -k    only run tests whose names match the expression


To generate a distribution tarball (not generally necessary)

  python setup sdist


Install the package for development:

  virtualenv $HOME/venv/bscr
  . $HOME/venv/bscr/bin/activate
  pip install --edit .


Install the package for use in my account:

  pip install --user https://github.com/tbarron/backscratcher/zipball/master


Upgrade already installed package

  pip install --upgrade \
      https://github.com/tbarron/backscratcher/zipball/master


To uninstall

  pip uninstall backscratcher


For general use on this machine:

  deactivate
  sudo pip install [--upgrade] \
     https://github.com/tbarron/backscratcher/zipball/master


Development/Release Process

 * The working copy should normally be left sitting on a feature
   branch, not master.

 * Iterate making changes in the feature branch and testing until
   satisfied that we're ready for the next release.

 * git checkout master

   Branch master should always be at a major version -- one that ends
   in '0' (e.g., 2014.0913.0). In this case, we're retrieving the
   previous release.

 * git merge FEATURE

   Merge the new changes into master. (What would this look like if I
   wanted to use rebase here instead?)

 * py.test --cov bscr

 * Update bscr/version.py to reflect the new release

 * git commit

 * git tag -a VERSION

 * git push --tags origin master

 * activate bscr-install-test
   pip install https://github.com/tbarron/backscratcher/archive/VERSION.tar.gz
   py.test
